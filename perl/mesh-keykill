#!/usr/bin/perl -T
#
# Copyright (C) 2006-2017 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration
# (NASA).  All Rights Reserved.
#
# This software is distributed under the NASA Open Source Agreement
# (NOSA), version 1.3.  The NOSA has been approved by the Open Source
# Initiative.  See http://www.opensource.org/licenses/nasa1.3.php
# for the complete NOSA document.
#
# THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
# KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
# LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
# SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
# THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
# DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS
# AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY
# GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING
# DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING
# FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS
# ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF
# PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS".
#
# RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
# GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR
# RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
# LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
# INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND
# HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED
# BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE
# IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
#

# This program invalidates a specific key with a given fingerprint or
# all keys.

use strict;
use File::Temp;
use Getopt::Long qw(:config bundling no_ignore_case require_order);

our $VERSION = 0.19;

# default configuration
my %conf = (
    conf_file => "/etc/mesh/mesh.conf",
    map_host => undef,
    map_port => 22,
    prefix_dir => "/usr/local",
    self_host => undef,
    var_dir => "/var/lib/mesh",
);

# parse configuration
open(FILE, $conf{conf_file}) or
    die "Config file $conf{conf_file} does not exist or is not readable\n";
my $mline;
while (my $line = <FILE>) {
    # strip whitespace and comments
    $line =~ s/^\s+|\s+$|\s*#.*//g;
    next if (!$line);
    # support line continuation operator
    $mline .= $line;
    next if ($mline =~ s/\s*\\$/ /);
    $conf{$1} = $2 if ($mline =~ /^(\S+)\s+(.*)/);
    $mline = undef;
}
close FILE;

# exit if any required parameters are not defined
foreach my $key (keys %conf) {
    die "Config parameter \"$key\" is not defined\n"
        if (!$conf{$key});
}

# untaint path
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";
# untaint insecure environment variables
delete $ENV{$_} foreach (qw(BASH_ENV CDPATH ENV IFS));

# parse arguments
my %opts = ();
my $rc = GetOptions(\%opts,
    "all", "user=s",
);
die "Invalid options\n"
    if (!$rc || scalar(@ARGV) > 1 || $opts{all} && scalar(@ARGV) == 1);

# untaint user
if ($opts{user} =~ /^([\w-.]+)$/) {
    $opts{user} = $1;
} elsif ($opts{user}) {
    die "Invalid user\n";
}

my $pubkey = "";
if ($opts{user}) {
    # kill key for given user if authorized
    my $user = getpwuid($<);
    if ($conf{"keygen_$opts{user}"}) {
        # invoking user must be in authorized list for given user
        if ($conf{"keygen_$opts{user}"} =~ /(?:^|\s)\Q$user\E(?:\s|$)/) {
            $pubkey = "$conf{var_dir}/meshkeys/$opts{user}($user)";
        }
    }
    die "Cannot kill keys for user \"$opts{user}\"\n" if (!$pubkey);
} else {
    $pubkey = "$conf{var_dir}/meshkeys/" . (getpwuid($<))[0];
}

my $useropt = $opts{user} ? "--user=$opts{user}" : "";
if ($opts{all}) {
    if ($conf{map_host} ne $conf{self_host}) {
        # kill keys on map if not local host
        system("ssh -p $conf{map_port} -axq -oBatchMode=yes $conf{map_host} mesh-keykill --all $useropt");
        die "Error killing keys on $conf{map_host}\n" if ($?);
    }

    # truncate file
    open(TMPKEY, ">$pubkey") or die "Error truncating public key file: $!\n";
    close TMPKEY;

    # synchronize public key
    if ($conf{sync_hook}) {
        my $cmd = $conf{sync_hook};
        $cmd =~ s/%f/$pubkey/g;
        system("$cmd >/dev/null 2>/dev/null");
    }
 
    # indicate success
    print "All keys killed successfully\n";
    exit;
}

my $kill_print;
if (scalar(@ARGV) == 0) {
    # read key from MESH_PUBKEY
    my $tmp = File::Temp->new;
    print $tmp $ENV{MESH_PUBKEY};
    close $tmp;
    # extract fingerprint from key file
    $kill_print = qx{ssh-keygen -l -f $tmp 2>/dev/null};
    # fingerprint is everything between first and second space
    $kill_print =~ s/^\S+\s+|\s+.*$//g;
} else {
    $kill_print = $ARGV[0];
}

# untaint kill key fingerprint
# fingerprint is either sha256 in base64 or md5 in hex pairs
if ($kill_print =~ /^([a-zA-Z0-9+\/:]+)$/) {
    $kill_print = $1;
} else {
    die "Error reading key fingerprint\n";
}

# make sure temporary public key file does not exist
unlink "$pubkey.tmp.pub";

my $found = 0;
if (open(KEY, "<$pubkey")) {
    if (open(TMPKEY, ">$pubkey.tmp.pub")) {
        while (my $key = <KEY>) {
            # get key fingerprint
            my $tmp = File::Temp->new;
            print $tmp $key;
            close $tmp;
            # extract fingerprint from key file
            my $print = qx{ssh-keygen -l -f $tmp 2>/dev/null};
            my $print_md5 = qx{ssh-keygen -E md5 -l -f $tmp 2>/dev/null};
            # fingerprint is everything between first and second space
            $print =~ s/^\S+\s+|\s+.*$//g;
            $print_md5 =~ s/^\S+\s+|\s+.*$//g;
            if ($print eq $kill_print || $print_md5 eq $kill_print) {
                $found = 1;
            } else {
                print TMPKEY $key;
            }
        }
        close TMPKEY;
    } else {
        close KEY;
        die "Error opening temporary key file: $!\n";
    }
    close KEY;

    # make sure temporary public key file is world readable
    chmod(0644, "$pubkey.tmp.pub");

    # rename temporary public key file to final name
    rename("$pubkey.tmp.pub", $pubkey);
    # synchronize public key
    if ($conf{sync_hook}) {
        my $cmd = $conf{sync_hook};
        $cmd =~ s/%f/$pubkey/g;
        system("$cmd >/dev/null 2>/dev/null");
    }
}

if ($found && $conf{map_host} ne $conf{self_host}) {
    # kill key on MAP
    system("ssh -p $conf{map_port} -axq -oBatchMode=yes $conf{map_host} mesh-keykill $useropt $kill_print");
    die "Error killing key on $conf{map_host}\n" if ($?);
}

if (!$found && !$opts{user} && scalar(@ARGV) == 0) {
    # key must reside in multi-user key file for invoking user
    my $user = getpwuid($<);
    if ($conf{"keygen_$user"}) {
        my $pubkey_kill = "$conf{var_dir}/meshkeys/$user.kill";
        if (open(KILL, ">>$pubkey_kill")) {
            $found = 1;
            print KILL "$kill_print\n";
            close KILL;
        } else {
            die "Error opening kill file: $!\n";
        }
    }
}

# indicate success or failure
if ($found) {
    print "Key $kill_print killed successfully\n";
} else {
    print "Unable to find key $kill_print\n";
}

